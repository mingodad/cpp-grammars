//From: https://github.com/dsw/oink-stack/blob/12901ab95b3ea60360906b63f6602f060ac3de1f/elsa/cc.gr
//elkhound -tr grammar cc.gr > cc.gr.txt
/*
auto fname = "cc.gr.txt";
auto txt = readfile(fname);

txt = txt.gsub(".-<EOF>", "", 1);
txt = txt.gsub("\n%S[^\n]+", "");
//txt = txt.replace("%%% grammar:", "", 1);
txt = txt.replace("  file cc.h unchanged, so not overwriting it.", "", 1);
txt = txt.gsub("\t\t%b[]", "");
txt = txt.gsub(" +%[%d+%] ", "");
txt = txt.gsub("(\n%S[^%[]+)%b[] %->", "%1 ::=");
txt = txt.gsub(" [A-Za-z]%S*:", " ");
txt = txt.gsub(" *%%prec%b()", "");
txt = txt.gsub(" ([^A-Z]%S*)", " \"%1\"");
txt = txt.replace("\"::=\"", "::=");
txt = txt.replace("::= \"empty\"", "::=");
print(txt);
*/
//railroad cc.gr.ebnf > cc.gr.ebnf.xhtml

File ::= TranslationUnit
Identifier ::= TOK_NAME
TranslationUnit ::=
TranslationUnit ::= TranslationUnit Declaration
TranslationUnit ::= TranslationUnit ";"
PrimaryExpression ::= Literal
PrimaryExpression ::= "this"
PrimaryExpression ::= "(" Expression ")"
PrimaryExpression ::= IdExpression
Literal ::= TOK_INT_LITERAL
Literal ::= TOK_FLOAT_LITERAL
Literal ::= StringLiteral
Literal ::= TOK_CHAR_LITERAL
Literal ::= "true"
Literal ::= "false"
PreprocString ::= TOK_STRING_LITERAL
StringLiteral ::= PreprocString
StringLiteral ::= PreprocString StringLiteral
IdExpression ::= PQualifiedId
IdExpression ::= "::" PQualifiedId
UnqualifiedId ::= Identifier
UnqualifiedId ::= OperatorFunctionId
UnqualifiedId ::= ConversionFunctionId
UnqualifiedId ::= TemplateId
PQualifiedId ::= UnqualifiedId
PQualifiedId ::= Identifier "::" PQualifiedId
PQualifiedId ::= Identifier "<" TemplateArgumentListOpt ">" "::" PQualifiedId
PQualifiedId ::= "template" Identifier "<" TemplateArgumentListOpt ">" "::" PQualifiedId
ArgumentList ::= "(" ExpressionListOpt ")"
PostfixExpression ::= PrimaryExpression
PostfixExpression ::= PostfixExpression "[" Expression "]"
PostfixExpression ::= PostfixExpression ArgumentList
PostfixExpression ::= "typename" IdExpression ArgumentList
PostfixExpression ::= CtorExpressionType ArgumentList
PostfixExpression ::= PostfixExpression "." NameAfterDot
PostfixExpression ::= PostfixExpression "->" NameAfterDot
PostfixExpression ::= PostfixExpression "++"
PostfixExpression ::= PostfixExpression "--"
PostfixExpression ::= CastKeyword "<" TypeId ">" "(" Expression ")"
PostfixExpression ::= "typeid" "(" Expression ")"
PostfixExpression ::= "typeid" "(" TypeId ")"
CtorExpressionType ::= PQTypeName
CtorExpressionType ::= "char"
CtorExpressionType ::= "wchar_t"
CtorExpressionType ::= "bool"
CtorExpressionType ::= "short"
CtorExpressionType ::= "int"
CtorExpressionType ::= "long"
CtorExpressionType ::= "signed"
CtorExpressionType ::= "unsigned"
CtorExpressionType ::= "float"
CtorExpressionType ::= "double"
CtorExpressionType ::= "void"
CastKeyword ::= "dynamic_cast"
CastKeyword ::= "static_cast"
CastKeyword ::= "reinterpret_cast"
CastKeyword ::= "const_cast"
ExpressionList ::= AssignmentExpression
ExpressionList ::= AssignmentExpression "," ExpressionList
ExpressionListOpt ::=
ExpressionListOpt ::= ExpressionList
UnaryExpression ::= PostfixExpression
UnaryExpression ::= "++" CastExpression
UnaryExpression ::= "--" CastExpression
UnaryExpression ::= "sizeof" UnaryExpression
UnaryExpression ::= DeleteExpression
UnaryExpression ::= "*" CastExpression
UnaryExpression ::= "&" CastExpression
UnaryExpression ::= "+" CastExpression
UnaryExpression ::= "-" CastExpression
UnaryExpression ::= "!" CastExpression
UnaryExpression ::= "~" CastExpression
UnaryExpression ::= "sizeof" "(" TypeId ")"
UnaryExpression ::= NewExpression
ColonColonOpt ::=
ColonColonOpt ::= "::"
NewExpression ::= ColonColonOpt "new" NewPlacementOpt NewTypeId NewInitializerOpt
NewExpression ::= ColonColonOpt "new" NewPlacementOpt "(" TypeId ")" NewInitializerOpt
NewPlacementOpt ::=
NewPlacementOpt ::= "(" ExpressionList ")"
NewTypeId ::= TypeSpecifier NewDeclaratorOpt
NewDeclaratorOpt ::=
NewDeclaratorOpt ::= "*" CVQualifierSeqOpt NewDeclaratorOpt
NewDeclaratorOpt ::= PtrToMemberName "*" CVQualifierSeqOpt NewDeclaratorOpt
NewDeclaratorOpt ::= DirectNewDeclarator
DirectNewDeclarator ::= "[" Expression "]"
DirectNewDeclarator ::= DirectNewDeclarator "[" ConstantExpression "]"
NewInitializerOpt ::=
NewInitializerOpt ::= "(" ExpressionListOpt ")"
DeleteExpression ::= ColonColonOpt "delete" CastExpression
DeleteExpression ::= ColonColonOpt "delete" "[" "]" CastExpression
NameAfterDot ::= NAD1
NameAfterDot ::= "::" NAD2
NAD1 ::= NAD2
NAD1 ::= "template" Identifier "<" TemplateArgumentListOpt ">"
NAD1 ::= "~" Identifier
NAD1 ::= "~" Identifier "<" TemplateArgumentListOpt ">"
NAD1 ::= ConversionFunctionId
NAD1 ::= "template" Identifier "<" TemplateArgumentListOpt ">" "::" NAD1
NAD2 ::= Identifier "<" TemplateArgumentListOpt ">"
NAD2 ::= Identifier
NAD2 ::= OperatorFunctionId
NAD2 ::= OperatorFunctionId "<" TemplateArgumentListOpt ">"
NAD2 ::= "template" OperatorFunctionId "<" TemplateArgumentListOpt ">"
NAD2 ::= Identifier "<" TemplateArgumentListOpt ">" "::" NAD1
NAD2 ::= Identifier "::" NAD1
CastExpression ::= UnaryExpression
CastExpression ::= "(" TypeId ")" CastExpression
BinExp_high ::= CastExpression
BinExp_high ::= BinExp_high ".*" BinExp_high
BinExp_high ::= BinExp_high "->*" BinExp_high
BinExp_high ::= BinExp_high "*" BinExp_high
BinExp_high ::= BinExp_high "/" BinExp_high
BinExp_high ::= BinExp_high "%" BinExp_high
BinExp_high ::= BinExp_high "+" BinExp_high
BinExp_high ::= BinExp_high "-" BinExp_high
BinExp_high ::= BinExp_high "<<" BinExp_high
BinExp_high ::= BinExp_high ">>" BinExp_high
BinExp_mid ::= BinExp_high
BinExp_mid ::= BinExp_mid "<" BinExp_high
BinExp_mid ::= BinExp_mid ">" BinExp_high
BinExp_mid ::= BinExp_mid "<=" BinExp_high
BinExp_mid ::= BinExp_mid ">=" BinExp_high
BinaryExpression ::= BinExp_mid
BinaryExpression ::= BinaryExpression "==" BinaryExpression
BinaryExpression ::= BinaryExpression "!=" BinaryExpression
BinaryExpression ::= BinaryExpression "&" BinaryExpression
BinaryExpression ::= BinaryExpression "^" BinaryExpression
BinaryExpression ::= BinaryExpression "|" BinaryExpression
BinaryExpression ::= BinaryExpression "&&" BinaryExpression
BinaryExpression ::= BinaryExpression "||" BinaryExpression
ConditionalExpression ::= BinaryExpression
ConditionalExpression ::= BinaryExpression "?" Expression ":" AssignmentExpression
AssignmentExpression ::= ConditionalExpression
AssignmentExpression ::= BinaryExpression AssignmentOperator AssignmentExpression
AssignmentExpression ::= ThrowExpression
AssignmentOperator ::= "*="
AssignmentOperator ::= "/="
AssignmentOperator ::= "%="
AssignmentOperator ::= "+="
AssignmentOperator ::= "-="
AssignmentOperator ::= ">>="
AssignmentOperator ::= "<<="
AssignmentOperator ::= "&="
AssignmentOperator ::= "^="
AssignmentOperator ::= "|="
AssignmentOperator ::= "="
Expression ::= AssignmentExpression
Expression ::= Expression "," AssignmentExpression
ExpressionOpt ::=
ExpressionOpt ::= Expression
ConstantExpression ::= AssignmentExpression
ConstantExpressionOpt ::=
ConstantExpressionOpt ::= ConstantExpression
LabelAndColon ::= Identifier ":"
Statement ::= LabelAndColon Statement
Statement ::= "case" ConstantExpression ":" Statement
Statement ::= "default" ":" Statement
Statement ::= ExpressionStatement
Statement ::= CompoundStatement
Statement ::= "if" "(" Condition ")" Statement
Statement ::= "if" "(" Condition ")" Statement "else" Statement
Statement ::= "switch" "(" Condition ")" Statement
Statement ::= "while" "(" Condition ")" Statement
Statement ::= "do" Statement "while" "(" Expression ")" ";"
Statement ::= "for" "(" ForInitStatement ConditionOpt ";" ExpressionOpt ")" Statement
Statement ::= "break" ";"
Statement ::= "continue" ";"
Statement ::= "return" Expression ";"
Statement ::= "return" ";"
Statement ::= "goto" Identifier ";"
Statement ::= BlockDeclaration
Statement ::= TryBlock
Statement ::= AsmDefinition
Statement ::= NamespaceDecl
ExpressionStatement ::= ";"
ExpressionStatement ::= Expression ";"
CompoundStatement ::= CompoundStmtHelper "}"
CompoundStmtHelper ::= "{"
CompoundStmtHelper ::= CompoundStmtHelper Statement AnnotationOpt
Condition ::= Expression
Condition ::= TypeSpecifier Declarator "=" AssignmentExpression
ConditionOpt ::=
ConditionOpt ::= Condition
ForInitStatement ::= ExpressionStatement
ForInitStatement ::= SimpleDeclaration
Declaration ::= BlockDeclaration
Declaration ::= FunctionDefinition
Declaration ::= TemplateDeclaration
Declaration ::= ExplicitInstantiation
Declaration ::= LinkageSpecification
Declaration ::= AsmDefinition
Declaration ::= NamespaceDefinition
Declaration ::= NamespaceDecl
BlockDeclaration ::= SimpleDeclaration
SimpleDeclaration ::= DeclSpecifier InitDeclaratorList ";"
SimpleDeclaration ::= DeclSpecifier ";"
DeclSpecifier ::= PQTypeName UberModifierSeqOpt
DeclSpecifier ::= UberModifierSeq PQTypeName UberModifierSeqOpt
DeclSpecifier ::= UberTypeKeyword UberTypeAndModifierSeqOpt
DeclSpecifier ::= UberModifierSeq UberTypeKeyword UberTypeAndModifierSeqOpt
DeclSpecifier ::= ElaboratedOrSpecifier UberModifierSeqOpt
DeclSpecifier ::= UberModifierSeq ElaboratedOrSpecifier UberModifierSeqOpt
ElaboratedOrSpecifier ::= ElaboratedTypeSpecifier
ElaboratedOrSpecifier ::= ClassSpecifier
ElaboratedOrSpecifier ::= EnumSpecifier
UberModifierSeq ::= UberModifier
UberModifierSeq ::= UberModifierSeq UberModifier
UberModifierSeqOpt ::=
UberModifierSeqOpt ::= UberModifierSeq
UberTypeAndModifierSeqOpt ::=
UberTypeAndModifierSeqOpt ::= UberTypeAndModifierSeqOpt UberModifier
UberTypeAndModifierSeqOpt ::= UberTypeAndModifierSeqOpt UberTypeKeyword
UberCVQualifierSeq ::= UberCVQualifier
UberCVQualifierSeq ::= UberCVQualifierSeq UberCVQualifier
UberCVQualifierSeqOpt ::=
UberCVQualifierSeqOpt ::= UberCVQualifierSeq
UberTypeAndCVQualifierSeqOpt ::=
UberTypeAndCVQualifierSeqOpt ::= UberTypeAndCVQualifierSeqOpt UberCVQualifier
UberTypeAndCVQualifierSeqOpt ::= UberTypeAndCVQualifierSeqOpt UberTypeKeyword
UberModifier ::= "auto"
UberModifier ::= "register"
UberModifier ::= "static"
UberModifier ::= "extern"
UberModifier ::= "mutable"
UberModifier ::= "inline"
UberModifier ::= "virtual"
UberModifier ::= "friend"
UberModifier ::= "typedef"
UberModifier ::= "const"
UberModifier ::= "volatile"
UberCVQualifier ::= "const"
UberCVQualifier ::= "volatile"
UberTypeKeyword ::= "char"
UberTypeKeyword ::= "wchar_t"
UberTypeKeyword ::= "bool"
UberTypeKeyword ::= "short"
UberTypeKeyword ::= "int"
UberTypeKeyword ::= "long"
UberTypeKeyword ::= "signed"
UberTypeKeyword ::= "unsigned"
UberTypeKeyword ::= "float"
UberTypeKeyword ::= "double"
UberTypeKeyword ::= "void"
ElaboratedTypeSpecifier ::= ClassKey PQTypeName
ElaboratedTypeSpecifier ::= "enum" PQTypeName
ElaboratedTypeSpecifier ::= "typename" PQTypeName
TypeSpecifier ::= PQTypeName UberCVQualifierSeqOpt
TypeSpecifier ::= UberCVQualifierSeq PQTypeName UberCVQualifierSeqOpt
TypeSpecifier ::= UberTypeKeyword UberTypeAndCVQualifierSeqOpt
TypeSpecifier ::= UberCVQualifierSeq UberTypeKeyword UberTypeAndCVQualifierSeqOpt
TypeSpecifier ::= ElaboratedOrSpecifier UberCVQualifierSeqOpt
TypeSpecifier ::= UberCVQualifierSeq ElaboratedOrSpecifier UberCVQualifierSeqOpt
PQTypeName ::= PQTypeName_ncc
PQTypeName ::= "::" PQTypeName_ncc
PQTypeName_ncc ::= Identifier
PQTypeName_ncc ::= TemplateId
PQTypeName_ncc ::= Identifier "::" PQTypeName_notfirst
PQTypeName_ncc ::= Identifier "<" TemplateArgumentListOpt ">" "::" PQTypeName_notfirst
PQTypeName_notfirst ::= PQTypeName_ncc
PQTypeName_notfirst ::= "template" TemplateId
PQTypeName_notfirst ::= "template" Identifier "<" TemplateArgumentListOpt ">" "::" PQTypeName_notfirst
EnumSpecifier ::= "enum" "{" EnumeratorListOpt "}"
EnumSpecifier ::= "enum" Identifier "{" EnumeratorListOpt "}"
EnumeratorListOpt ::=
EnumeratorListOpt ::= EnumeratorDefinition
EnumeratorListOpt ::= EnumeratorDefinition "," EnumeratorListOpt
EnumeratorDefinition ::= Identifier
EnumeratorDefinition ::= Identifier "=" ConstantExpression
AsmDefinition ::= "asm" "(" StringLiteral ")" ";"
LinkageSpecification ::= "extern" TOK_STRING_LITERAL "{" TranslationUnit "}"
LinkageSpecification ::= "extern" TOK_STRING_LITERAL Declaration
InitDeclaratorList ::= InitDeclarator
InitDeclaratorList ::= InitDeclarator "," InitDeclaratorList
InitDeclarator ::= Declarator
InitDeclarator ::= Declarator Initializer
Initializer ::= "=" SimpleInitializerClause
Initializer ::= "(" ExpressionList ")"
SimpleInitializerClause ::= AssignmentExpression
SimpleInitializerClause ::= CompoundInitializer
InitializerClause ::= SimpleInitializerClause
CompoundInitializer ::= "{" InitializerList CommaOpt "}"
CompoundInitializer ::= "{" "}"
CommaOpt ::=
CommaOpt ::= ","
InitializerList ::= InitializerClause
InitializerList ::= InitializerList "," InitializerClause
Declarator ::= "*" CVQualifierSeqOpt Declarator
Declarator ::= "&" CVQualifierSeqOpt Declarator
Declarator ::= PtrToMemberName "*" CVQualifierSeqOpt Declarator
Declarator ::= DirectDeclarator
DirectDeclarator ::= IdExpression
DirectDeclarator ::= PQDtorName
DirectDeclarator ::= DirectDeclarator "(" ParameterDeclarationClause ")" CVQualifierSeqOpt ExceptionSpecificationOpt
DirectDeclarator ::= DirectDeclarator "[" ConstantExpressionOpt "]"
DirectDeclarator ::= "(" Declarator ")"
PQDtorName ::= "~" Identifier
PQDtorName ::= "~" Identifier "<" TemplateArgumentListOpt ">"
PQDtorName ::= Identifier "::" PQDtorName
PQDtorName ::= Identifier "<" TemplateArgumentListOpt ">" "::" PQDtorName
PQDtorName ::= "template" Identifier "<" TemplateArgumentListOpt ">" "::" PQDtorName
PtrToMemberName ::= IdExpression "::"
CVQualifierSeqOpt ::=
CVQualifierSeqOpt ::= CVQualifierSeq
CVQualifierSeq ::= CVQualifier
CVQualifierSeq ::= CVQualifier CVQualifierSeq
CVQualifier ::= "const"
CVQualifier ::= "volatile"
TypeId ::= TypeSpecifier AbstractDeclaratorOpt
AbstractDeclaratorOpt ::=
AbstractDeclaratorOpt ::= AbstractDeclarator
AbstractDeclarator ::= "*" CVQualifierSeqOpt AbstractDeclaratorOpt
AbstractDeclarator ::= "&" CVQualifierSeqOpt AbstractDeclaratorOpt
AbstractDeclarator ::= PtrToMemberName "*" CVQualifierSeqOpt AbstractDeclaratorOpt
AbstractDeclarator ::= DirectAbstractDeclarator
DirectAbstractDeclaratorOpt ::=
DirectAbstractDeclaratorOpt ::= DirectAbstractDeclarator
DirectAbstractDeclarator ::= DirectAbstractDeclaratorOpt "(" ParameterDeclarationClause ")" CVQualifierSeqOpt ExceptionSpecificationOpt
DirectAbstractDeclarator ::= DirectAbstractDeclaratorOpt "[" ConstantExpressionOpt "]"
DirectAbstractDeclarator ::= "(" AbstractDeclarator ")"
ParameterDeclarationClause ::= ParameterDeclarationList
ParameterDeclarationClause ::=
ParameterDeclarationList ::= "..."
ParameterDeclarationList ::= ParameterDeclaration "..."
ParameterDeclarationList ::= ParameterDeclaration
ParameterDeclarationList ::= ParameterDeclaration "," ParameterDeclarationList
ParameterDeclaration ::= TypeSpecifier ParameterDeclarator
ParameterDeclaration ::= "register" TypeSpecifier ParameterDeclarator
ParameterDeclaration ::= TypeSpecifier "register" ParameterDeclarator
ParameterDeclarator ::= UnqualifiedDeclarator
ParameterDeclarator ::= UnqualifiedDeclarator "=" AssignmentExpression
ParameterDeclarator ::= AbstractDeclaratorOpt
ParameterDeclarator ::= AbstractDeclaratorOpt "=" AssignmentExpression
FunctionDefinition ::= DeclSpecifier FDDeclarator FunctionBody
FunctionDefinition ::= DeclSpecifier FDDeclarator "try" FunctionBody HandlerSeq
FunctionDefinition ::= CDtorModifierSeq FDDeclarator CtorInitializerOpt FunctionBody
FunctionDefinition ::= FDDeclarator CtorInitializerOpt FunctionBody
FunctionDefinition ::= CDtorModifierSeq FDDeclarator "try" CtorInitializerOpt FunctionBody HandlerSeq
FunctionDefinition ::= FDDeclarator "try" CtorInitializerOpt FunctionBody HandlerSeq
FDDeclarator ::= Declarator
FunctionBody ::= CompoundStatement
CtorInitializerOpt ::=
CtorInitializerOpt ::= ":" MemInitializerList
ClassSpecifier ::= ClassKey ClassHeadNameOpt BaseClauseOpt "{" MemberDeclarationSeqOpt "}"
ClassHeadNameOpt ::=
ClassHeadNameOpt ::= ClassHeadName
ClassHeadName ::= Identifier
ClassHeadName ::= TemplateId
ClassHeadName ::= Identifier "::" ClassHeadName
ClassHeadName ::= Identifier "<" TemplateArgumentListOpt ">" "::" ClassHeadName
ClassHeadName ::= "template" Identifier "<" TemplateArgumentListOpt ">" "::" ClassHeadName
ClassKey ::= "class"
ClassKey ::= "struct"
ClassKey ::= "union"
MemberDeclarationSeqOpt ::=
MemberDeclarationSeqOpt ::= MemberDeclarationSeqOpt ";"
MemberDeclarationSeqOpt ::= MemberDeclarationSeqOpt MemberDeclaration
MemberDeclarationSeqOpt ::= MemberDeclarationSeqOpt AccessSpecifier ":"
AccessSpecifier ::= "public"
AccessSpecifier ::= "private"
AccessSpecifier ::= "protected"
MemberDeclaration ::= DeclSpecifier MemberDeclaratorList ";"
MemberDeclaration ::= DeclSpecifier ";"
MemberDeclaration ::= PQualifiedId ";"
MemberDeclaration ::= "using" IdExpression ";"
MemberDeclaration ::= FunctionDefinition
MemberDeclaration ::= CDtorProtoDecl
MemberDeclaration ::= TemplateDeclaration
CDtorProtoDecl ::= CDtorModifierSeq MemberDeclarator ";"
CDtorProtoDecl ::= MemberDeclarator ";"
MemberDeclaratorList ::= MemberDeclarator
MemberDeclaratorList ::= MemberDeclarator "," MemberDeclaratorList
MemberDeclarator ::= Declarator
MemberDeclarator ::= Declarator "=" ConstantExpression
MemberDeclarator ::= IdentifierOpt ":" ConstantExpression
IdentifierOpt ::=
IdentifierOpt ::= Identifier
CDtorModifier ::= "explicit"
CDtorModifier ::= "virtual"
CDtorModifier ::= "inline"
CDtorModifier ::= "friend"
CDtorModifierSeq ::= CDtorModifier
CDtorModifierSeq ::= CDtorModifierSeq CDtorModifier
BaseClauseOpt ::=
BaseClauseOpt ::= ":" BaseSpecifierList
BaseSpecifierList ::= BaseSpecifier
BaseSpecifierList ::= BaseSpecifier "," BaseSpecifierList
BaseSpecifier ::= PQClassName
BaseSpecifier ::= "virtual" AccessSpecifierOpt PQClassName
BaseSpecifier ::= AccessSpecifier VirtualOpt PQClassName
VirtualOpt ::=
VirtualOpt ::= "virtual"
AccessSpecifierOpt ::=
AccessSpecifierOpt ::= AccessSpecifier
PQClassName ::= PQTypeName
ConversionFunctionId ::= "operator" ConversionTypeId
ConversionTypeId ::= TypeSpecifier ConversionDeclaratorOpt
ConversionDeclaratorOpt ::=
ConversionDeclaratorOpt ::= "*" CVQualifierSeqOpt ConversionDeclaratorOpt
ConversionDeclaratorOpt ::= "&" CVQualifierSeqOpt ConversionDeclaratorOpt
ConversionDeclaratorOpt ::= PtrToMemberName "*" CVQualifierSeqOpt ConversionDeclaratorOpt
MemInitializerList ::= MemInitializer
MemInitializerList ::= MemInitializer "," MemInitializerList
MemInitializer ::= MemInitializerId "(" ExpressionListOpt ")"
MemInitializerId ::= PQTypeName
OperatorFunctionId ::= "operator" Operator
Operator ::= "new"
Operator ::= "delete"
Operator ::= "new" "[" "]"
Operator ::= "delete" "[" "]"
Operator ::= "!"
Operator ::= "~"
Operator ::= "++"
Operator ::= "--"
Operator ::= "+"
Operator ::= "-"
Operator ::= "*"
Operator ::= "/"
Operator ::= "%"
Operator ::= "<<"
Operator ::= ">>"
Operator ::= "&"
Operator ::= "^"
Operator ::= "|"
Operator ::= "="
Operator ::= "+="
Operator ::= "-="
Operator ::= "*="
Operator ::= "/="
Operator ::= "%="
Operator ::= "<<="
Operator ::= ">>="
Operator ::= "&="
Operator ::= "^="
Operator ::= "|="
Operator ::= "=="
Operator ::= "!="
Operator ::= "<"
Operator ::= ">"
Operator ::= "<="
Operator ::= ">="
Operator ::= "&&"
Operator ::= "||"
Operator ::= "->"
Operator ::= "->*"
Operator ::= "[" "]"
Operator ::= "(" ")"
Operator ::= ","
TemplateDeclaration ::= TemplatePreamble FunctionDefinition
TemplateDeclaration ::= TemplatePreamble SimpleDeclaration
TemplateDeclaration ::= TemplatePreamble TemplateDeclaration
TemplateDeclaration ::= TemplatePreamble CDtorProtoDecl
TemplatePreamble ::= "template" "<" TemplateParameterList ">"
TemplatePreamble ::= "export" "template" "<" TemplateParameterList ">"
TemplatePreamble ::= "template" "<" ">"
TemplatePreamble ::= "export" "template" "<" ">"
TemplateParameterList ::= ClassOrTypename IdentifierOpt DefaultTypeOpt TemplateParameterListContinuation
TemplateParameterList ::= ParameterDeclaration TemplateParameterListContinuation
TemplateParameterList ::= "template" "<" TemplateParameterList ">" "class" IdentifierOpt DefaultTemplateOpt TemplateParameterListContinuation
TemplateParameterListContinuation ::=
TemplateParameterListContinuation ::= "," TemplateParameterList
ClassOrTypename ::= "class"
ClassOrTypename ::= "typename"
DefaultTypeOpt ::=
DefaultTypeOpt ::= "=" TypeId
DefaultTemplateOpt ::=
DefaultTemplateOpt ::= "=" IdExpression
TemplateArgumentListOpt ::=
TemplateArgumentListOpt ::= TemplateArgumentList
TemplateId ::= Identifier "<" TemplateArgumentListOpt ">"
TemplateId ::= OperatorFunctionId "<" TemplateArgumentListOpt ">"
TemplateArgumentList ::= TemplateArgument
TemplateArgumentListTailOpt ::=
TemplateArgumentListTailOpt ::= "," TemplateArgument
TemplateArgument ::= TypeId TemplateArgumentListTailOpt
TemplateArgument ::= AssignmentExpression TemplateArgumentListTailOpt
ExplicitInstantiation ::= "template" BlockDeclaration
ExplicitInstantiation ::= "inline" "template" BlockDeclaration
TryBlock ::= "try" CompoundStatement HandlerSeq
HandlerSeq ::= Handler
HandlerSeq ::= Handler HandlerSeq
Handler ::= "catch" "(" HandlerParameter ")" CompoundStatement
Handler ::= "catch" "(" "..." ")" CompoundStatement
HandlerParameter ::= TypeSpecifier UnqualifiedDeclarator
HandlerParameter ::= TypeSpecifier AbstractDeclaratorOpt
UnqualifiedDeclarator ::= Declarator
ThrowExpression ::= "throw"
ThrowExpression ::= "throw" AssignmentExpression
ExceptionSpecificationOpt ::=
ExceptionSpecificationOpt ::= "throw" "(" ")"
ExceptionSpecificationOpt ::= "throw" "(" TypeIdList ")"
TypeIdList ::= TypeId
TypeIdList ::= TypeId "," TypeIdList
NamespaceDefinition ::= "namespace" IdentifierOpt "{" TranslationUnit "}"
NamespaceDecl ::= "namespace" Identifier "=" IdExpression ";"
NamespaceDecl ::= "using" IdExpression ";"
NamespaceDecl ::= "using" "namespace" IdExpression ";"
AnnotationOpt ::=
AnnotationOpt ::= AnnotationList
AnnotationList ::= TOK_ANNOTATION
AnnotationList ::= TOK_ANNOTATION AnnotationList
