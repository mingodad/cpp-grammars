//
// EBNF to be viewd at https://www.bottlecaps.de/rr/ui
//
// Copy and paste this at https://www.bottlecaps.de/rr/ui in the 'Edit Grammar' tab
// then click the 'View Diagram' tab.
//
/*ident	"@(#)cls4:src/gram.y	1.29" */
/*******************************************************************************

C++ source for the C++ Language System, Release 3.0.  This product
is a new release of the original cfront developed in the computer
science research center of AT&T Bell Laboratories.

Copyright (c) 1993  UNIX System Laboratories, Inc.
Copyright (c) 1991, 1992 AT&T and UNIX System Laboratories, Inc.
Copyright (c) 1984, 1989, 1990 AT&T.  All Rights Reserved.

THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE of AT&T and UNIX System
Laboratories, Inc.  The copyright notice above does not evidence
any actual or intended publication of such source code.

gram.y:

	This is the C++ syntax analyser.

	Syntax extensions for error handling:
		nested functions
		any expression can be empty
		any expression can be a constant_expression

	A call to error() does not change the parser's state

***************************************************************************/

ext_def::=
	  external_def
	| SM
	| EOFTOK
	| LINKAGE LC
	| RC
	| template

template::=
	  TEMPLATE LT template_parm_list GT template_def

template_def::=
	  data_dcl
	| att_fct_def
	| fct_def
	| fct_dcl
	| class_dcl SM

identifier::=
	  ID
	| qualified_tname

external_def::=
	  data_dcl
	| att_fct_def
	| fct_def
	| fct_dcl
	| ASM LP STRING RP SM

fct_dcl::=
	  decl ASSIGN initializer SM
	| decl SM

att_fct_def::=
	  type decl arg_dcl_list check_inline base_init block
	| type decl arg_dcl_list check_inline EMPTY
	| type decl arg_dcl_list check_inline NO_ID

fct_def::=
	  decl arg_dcl_list check_inline base_init block
	| decl arg_dcl_list check_inline EMPTY
	| decl arg_dcl_list check_inline NO_ID

inline_fct_def::=
	  FDEF base_init block

check_inline::=
	  /*%empty*/

base_init::=
	  COLON init_list
	| /*%empty*/

init_list::=
	  binit
	| init_list CM binit

binit::=
	  LP elist RP
	| ttag LP elist RP

arg_dcl_list::=
	  arg_dcl_list data_dcl
	| /*%empty*/

dl::=
	  decl
	| ID COLON e
	| COLON e
	| decl ASSIGN initializer

decl_list::=
	  dl
	| decl_list CM dl

data_dcl::=
	  type decl_list SM
	| type SM

lt::=
	  LT

gt::=
	  GT

tname::=
	  qualified_tname
	| qualified_tname lt temp_inst_parms gt
	| NAME lt temp_inst_parms gt

tp::=
	  TYPE
	| LINKAGE
	| tname
	| tn_list DECL_MARKER
	| class_dcl
	| enum_dcl
	| DECL_MARKER

type::=
	  tp
	| type TYPE
	| type tname
	| type class_dcl
	| type enum_dcl
	| type DECL_MARKER

cm::=
	  CM

temp_inst_parms::=
	  temp_inst_parms cm temp_inst_parm
	| temp_inst_parm

new_decl2::=
	  /*%empty*/
	| arg_lp new_decl2 RP
	| ptr new_decl2
	| new_decl2 arg_list
	| new_decl2 vec

new_type2::=
	  type new_decl2

temp_inst_parm::=
	  new_type2
	| e

enumtag::=
	  tag
	| DECL_MARKER
	| tn_list DECL_MARKER

enum_dcl::=
	  ENUM LC moe_list RC
	| ENUM enumtag LC moe_list RC
	| ENUM enumtag

moe_list::=
	  moe
	| moe_list CM moe

template_parm_list::=
	  template_parm_list CM template_parm
	| template_parm
	| /*%empty*/

template_parm::=
	  AGGR identifier
	| type formal_decl

formal_decl::=
	  ID
	| ptr formal_decl
	| formal_decl vec
	| formal_decl arg_list
	| arg_lp formal_decl RP

moe::=
	  ID
	| ID ASSIGN e
	| /*%empty*/

class_dcl::=
	  class_head cl_mem_list RC inline_mem_defs
	| AGGR tag
	| AGGR qualified_tname lt temp_inst_parms gt
	| AGGR DECL_MARKER

inline_mem_defs::=
	  /*%empty*/
	| inline_mem_defs inline_fct_def

base_list::=
	  COLON base_unit_list
	| /*%empty*/

base_unit_list::=
	  base_unit
	| base_unit_list CM base_unit

base_unit::=
	  ttag
	| PR ttag
	| TYPE ttag
	| PR TYPE ttag
	| TYPE PR ttag

class_head::=
	  AGGR LC
	| AGGR tag base_list LC
	| AGGR qualified_tname lt temp_inst_parms gt base_list LC

tag::=
	  ID
	| qualified_tname

ttag::=
	  ID
	| tname

cl_mem_list::=
	  cl_mem_list cl_mem
	| /*%empty*/
	| cl_mem_list template

cl_mem::=
	  data_dcl
	| att_fct_def SM
	| fct_def SM
	| fct_def
	| att_fct_def
	| fct_dcl
	| PR COLON
	| scope_qualifiers fname SM

fname::=
	  ID
	| COMPL TNAME
	| OPERATOR oper
	| OPERATOR c_type

oper::=
	  PLUS
	| MINUS
	| MUL
	| AND
	| OR
	| ER
	| SHIFTOP
	| EQUOP
	| DIVOP
	| RELOP
	| LT
	| GT
	| ANDAND
	| OROR
	| LP RP
	| LB RB
	| NOT
	| COMPL
	| ICOP
	| ASOP
	| ASSIGN
	| NEW
	| NEW LB RB
	| DELETE
	| DELETE LB RB
	| REF
	| CM
	| REFMUL

scope_qualifiers::=
	  tn_list

tn_list::=
	  tscope
	| tn_list tscope

qualified_tname::=
	  tn_list TNAME
	| TNAME

fct_attributes::=
	  /*%empty*/
	| fct_attributes TYPE
	| fct_attributes THROW LP type_list RP

type_list::=
	  tag
	| type_list CM tag

decl::=
	  decl arg_list
	| decl LP RP fct_attributes
	| tname arg_list
	| decl arg_lp elist RP
	| tname LP MUL ID RP arg_list
	| tname LP AND ID RP arg_list
	| tname LP elist RP
	| tname LP RP fct_attributes
	| tname LP MEMPTR decl RP arg_list
	| fname
	| ID DOT fname
	| scope_qualifiers fname
	| scope_qualifiers ID DOT fname
	| ptr decl
	| ptr tname
	| tname vec
	| decl vec
	| arg_lp decl RP

arg_decl::=
	  ID
	| ptr qualified_tname
	| /*%empty*/
	| ptr arg_decl
	| arg_decl vec
	| arg_decl arg_list
	| arg_lp arg_decl RP

new_decl::=
	  /*%empty*/
	| ptr new_decl
	| new_decl vec

cast_decl::=
	  /*%empty*/
	| ptr cast_decl
	| cast_decl vec
	| LP cast_decl RP arg_list
	| LP cast_decl RP vec

c_decl::=
	  /*%empty*/
	| ptr c_decl

stmt_list::=
	  /*%empty*/
	| stmt_list TEMPLATE
	| stmt_list caselab_stmt

caselab_stmt::=
	  caselablist statement

caselablist::=
	  /*%empty*/

condition::=
	  LP e RP

block::=
	  LC stmt_list RC
	| LC RC

simple::=
	  ee
	| BREAK
	| CONTINUE
	| GOTO ID
	| DO caselab_stmt WHILE condition
	| ASM LP STRING RP

sm::=
	  SM

statement::=
	  simple sm
	| SM
	| RETURN e SM
	| TYPE STRING block
	| data_dcl
	| att_fct_def
	| block
	| IF condition caselab_stmt
	| IF condition caselab_stmt ELSE caselab_stmt
	| WHILE condition caselab_stmt
	| FOR LP caselab_stmt e SM e RP caselab_stmt
	| SWITCH condition caselab_stmt
	| ID COLON caselab_stmt
	| TNAME COLON caselab_stmt
	| CASE e COLON caselab_stmt
	| DEFAULT COLON caselab_stmt
	| TRY block handler_list

handler_list::=
	  /*%empty*/
	| handler_list handler

handler::=
	  CATCH exception_type block

exception_type::=
	  arg_lp type arg_decl RP
	| LP ELLIPSIS RP

elist::=
	  ex_list

ex_list::=
	  initializer
	| ex_list CM initializer

initializer::=
	  e
	| LC elist RC

ee::=
	  ee ASSIGN ee
	| ee PLUS ee
	| ee MINUS ee
	| ee MUL ee
	| ee AND ee
	| ee OR ee
	| ee ER ee
	| ee SHIFTOP ee
	| ee EQUOP ee
	| ee DIVOP ee
	| ee RELOP ee
	| ee GT ee
	| ee LT ee
	| ee ANDAND ee
	| ee OROR ee
	| ee ASOP ee
	| ee CM ee
	| ee QUEST ee COLON ee
	| ee REFMUL ee
	| DELETE term
	| DELETE LB e RB term
	| MEM DELETE term
	| MEM DELETE LB e RB term
	| term
	| THROW term

e::=
	  e ASSIGN e
	| e PLUS e
	| e MINUS e
	| e MUL e
	| e AND e
	| e OR e
	| e ER e
	| e SHIFTOP e
	| e EQUOP e
	| e DIVOP e
	| e RELOP e
	| e LT e
	| e GT e
	| e ANDAND e
	| e OROR e
	| e ASOP e
	| e CM e
	| e QUEST e COLON e
	| e REFMUL e
	| DELETE term
	| DELETE LB e RB term
	| MEM DELETE term
	| MEM DELETE LB e RB term
	| term
	| THROW term
	| /*%empty*/

term::=
	  NEW cast_type
	| NEW new_type
	| MEM NEW cast_type
	| MEM NEW new_type
	| term ICOP
	| cast_type term
	| MUL term
	| AND term
	| MINUS term
	| PLUS term
	| NOT term
	| COMPL term
	| ICOP term
	| SIZEOF term
	| SIZEOF cast_type
	| term LB e RB
	| term REF prim
	| term REF MEMQ prim
	| term REF MEMQ TNAME
	| term REF dtorspec
	| term REF scope_qualifiers prim
	| term REF scope_qualifiers TNAME
	| term DOT prim
	| term DOT MEMQ prim
	| term DOT MEMQ TNAME
	| term DOT dtorspec
	| term DOT scope_qualifiers prim
	| term DOT scope_qualifiers TNAME
	| prim
	| scope_qualifiers prim
	| tn_list COMPL tag
	| tn_list COMPL TYPE
	| term_elist
	| term_lp e RP
	| ZERO
	| ICON
	| FCON
	| STRING
	| CCON
	| THIS

dtorspec::=
	  COMPL tag
	| MEMQ COMPL tag
	| TYPE MEM COMPL TYPE
	| COMPL TYPE
	| TYPE MEM COMPL tag
	| MEMQ COMPL TYPE
	| tn_list COMPL tag
	| tn_list COMPL TYPE

term_elist::=
	  TYPE LP elist RP
	| tname LP elist RP
	| NEW term_lp elist RP cast_type
	| NEW term_lp elist RP new_type
	| MEM NEW term_lp elist RP cast_type
	| MEM NEW term_lp elist RP new_type
	| term LP elist RP

ptname::=
	  PTNAME lt temp_inst_parms gt

tscope::=
	  TSCOPE
	| MEM
	| ptname TSCOPE

prim::=
	  ID
	| OPERATOR oper
	| OPERATOR c_type

cast_type::=
	  term_lp type cast_decl RP

term_lp::=
	  LP

c_tp::=
	  TYPE
	| tname
	| c_tp TYPE
	| c_tp tname

c_type::=
	  c_tp c_decl

new_type::=
	  type new_decl

arg_type::=
	  type arg_decl
	| type arg_decl ASSIGN initializer

arg_lp::=
	  LP

arg_list::=
	  arg_lp arg_type_list ellipsis_opt RP fct_attributes

arg_type_list::=
	  arg_type_list CM at
	| at

at::=
	  arg_type
	| /*%empty*/

ellipsis_opt::=
	  /*%empty*/
	| ELLIPSIS
	| CM ELLIPSIS

ptr::=
	  MUL
	| AND
	| MUL TYPE
	| ptr TYPE
	| AND TYPE
	| ptname MEMPTR
	| MEMPTR
	| ptname MEMPTR TYPE
	| MEMPTR TYPE

vec::=
	  LB e RB
	| NOT

//Lexer

//EMPTY ::= EMPTY
BREAK ::= "break"
CASE ::= "case"
CONTINUE ::= "continue"
DEFAULT ::= "default"
DELETE ::= "delete"
DO ::= "do"
ENUM ::= "enum"
FOR ::= "for"
GOTO ::= "goto"
IF ::= "if"
RETURN ::= "return"
WHILE ::= "while"
LC ::= '{'
RC ::= '}'
//TYPE ::= TYPE
//TNAME ::= TNAME
//AGGR ::= AGGR
TSCOPE ::= "::"
CM ::= ','
ASSIGN ::= '='
//ASOP ::= ASOP
QUEST ::= '?'
COLON ::= ':'
OROR ::= "||"
ANDAND ::= "&&"
OR ::= '|'
ER ::= '^'
AND ::= '&'
EQUOP ::= "=="
LT ::= '<'
GT ::= '>'
//RELOP ::= RELOP
SHIFTOP ::= "<<" | ">>"
PLUS ::= '+'
MINUS ::= '-'
MUL ::= '*'
DIVOP ::= '/'
//MEMPTR ::= MEMPTR
//REFMUL ::= REFMUL
NEW ::= "new"
NOT ::= '!'
COMPL ::= '~'
SIZEOF ::= "sizeof"
//ICOP ::= ICOP
LP ::= '('
LB ::= '['
//REF ::= REF
DOT ::= '.'
//MEM ::= MEM
SM ::= ';'
//EOFTOK ::= EOFTOK
//LINKAGE ::= LINKAGE
TEMPLATE ::= "template"
ASM ::= "asm"
RP ::= ')'
//FDEF ::= FDEF
//NAME ::= NAME
//DECL_MARKER ::= DECL_MARKER
//PR ::= PR
OPERATOR ::= "operator"
RB ::= ']'
THROW ::= "throw"
ELSE ::= "else"
SWITCH ::= "switch"
TRY ::= "try"
CATCH ::= "catch"
ELLIPSIS ::= "..."
//MEMQ ::= MEMQ
//ZERO ::= ZERO
//ICON ::= ICON
//FCON ::= FCON
//CCON ::= CCON
THIS ::= "this"
//PTNAME ::= PTNAME
